{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Filter","props","value","filterStr","onChange","handleChange","PersonForm","onSubmit","newName","handleNameChange","newNumber","handleNumberChange","type","Persons","persons","filter","handleRemovePerson","person","name","toLowerCase","includes","map","key","number","onClick","Notification","message","className","App","useState","setPersons","setNewName","setNewNumber","setFilter","notification","setNotification","notificationType","setNotificationType","useEffect","console","log","personService","initialPersons","resetAfterAdd","setTimeout","event","target","preventDefault","findPerson","find","window","confirm","newPerson","returnedPerson","catch","err","concat","personToRemove","removedPerson","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.0b2048e5.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove }","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport './index.css'\n\nconst Filter = (props) => {\n  return (\n    <div>\n      Filter shown with <input value={props.filterStr} onChange={props.handleChange} />\n    </div>\n  )\n}\n\nconst PersonForm = (props) => {\n  return (\n    <form onSubmit={props.onSubmit}>\n      <div>\n        name: <input value={props.newName} onChange={props.handleNameChange} />\n      </div>\n      <div>\n        number: <input value={props.newNumber} onChange={props.handleNumberChange} />\n      </div>\n      \n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Persons = ({persons, filter, handleRemovePerson}) => {\n  return (\n    <div>\n      {persons.filter(person => person.name.toLowerCase().includes(filter.toLowerCase()))\n        .map(person => \n        <p key={person.id}>\n          {person.name} {person.number}\n          <button onClick={() => handleRemovePerson(person.id)}>Delete</button>\n        </p>\n      )}\n    </div>\n  )\n}\n\nconst Notification = ({ message, type }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className={type}>\n      {message}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ notification, setNotification ] = useState(null)\n  const [ notificationType, setNotificationType ] = useState('')\n\n  useEffect(() => {\n    console.log('effect')\n\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    console.log(event.target.value)\n    setFilter(event.target.value)\n  }\n  \n  const timeoutNotification = () => {\n    setTimeout(() => {\n      setNotification(null)\n    }, 5000)\n  }\n\n  const addName = (event) => {\n    event.preventDefault()\n    console.log(persons)\n    const findPerson = persons.find(person => person.name === newName)\n\n    // check if the person is already in the phonebook\n    if (findPerson) {\n      //alert(`${newName} already exists`)\n      const confirm = window.confirm(`${findPerson.name} is already added to the phonebook. Replace the old number with a new one?`)\n      \n      if (confirm) {\n        const newPerson = {name: newName, number: newNumber}\n        personService\n          .update(findPerson.id, newPerson)\n          .then(returnedPerson => {\n            setPersons(persons.map(person => person.id !== findPerson.id ? person : returnedPerson))\n            resetAfterAdd(newName)\n          })\n          .catch(err => {\n            setNotification(`Information of ${newName} has already been removed from server`)\n            setNotificationType('error')\n          })\n      }\n\n    } else {\n      const newPerson = {name: newName, number: newNumber}\n      personService\n        .create(newPerson)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          resetAfterAdd(newName)\n        })\n        .catch(err => {\n          //setNotification(`Information of ${newName} has already been removed from server`)\n          setNotification(`Information of ${err.message} has already been removed from server`)\n          setNotificationType('error')\n          console.log(err)\n        })\n    }\n        \n  }\n\n  const resetAfterAdd = (newName) => {\n    setNewName('')\n    setNewNumber('')\n    setNotification(`Added ${newName}`)\n    setNotificationType('success')\n    timeoutNotification()\n  }\n\n  const removePerson = (id) => {\n    console.log(`person with id ${id} needs to be deleted`)\n    const personToRemove = persons.find(person => person.id === id)\n\n    // Confirm action\n    const confirm = window.confirm(`Delete ${personToRemove.name}?`)\n    if (confirm) {\n      personService\n      .remove(id)\n      .then(removedPerson => {\n        setPersons(persons.filter(person => person.id !== id))\n      })\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notification} type={notificationType} />\n\n      <Filter filterStr={filter} handleChange={handleFilterChange} />\n\n      <h3>Add a new contact:</h3>\n      <PersonForm onSubmit={addName}\n        newName={newName} handleNameChange={handleNameChange}\n        newNumber={newNumber} handleNumberChange={handleNumberChange}\n      />\n\n      <h3>Numbers</h3>\n\n      <Persons persons={persons} filter={filter} handleRemovePerson={removePerson}/>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}